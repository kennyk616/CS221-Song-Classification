>> python main.py --seed_xval 1 --seed_pairs 1 --LMNN -c 50 -p scale -f combo --knn -k 7 --knn_relax_n 5 --lmnnMu 0.00001
Training set:  50 cliques found in 624 tracks.
Test set:  50 cliques found in 262 tracks.
-- using combo features --
Data preprocessor: <class 'transform.StandardScaler'>
Loading training set...  completed in 13 seconds.
Preprocessing data...  completed in 0.027 seconds.
Creating temp file 'temp/LMNN-data.temp.mat'  : 1.2 MB
Invoking MATLAB with command:
>> matlab -nodisplay -nojvm -r "cd 'lib/mLMNN2.4/'; run('setpaths.m'); cd '../../'; load('temp/LMNN-data.temp.mat'); [L,Det] = lmnn2(X',y', 'diagonal', params.diagonal, 'mu', params.mu, 'obj', 0); save('temp/LMNN-res.temp.mat', 'L', 'Det', '-v6'); quit;"
 logging results to temp/LMNN.log
LMNN optimization completed in 1.3 minutes.
 results logged to temp/LMNN.log
Mahalanobis matrix: 
  243 dimensions
  58806 nonzero elements
KNN: using 'mahalanobis' metric with params ['VI']
Running KNN with k=7 and mahalanobis metric
==> KNN training accuracy: 22.60%
==> KNN test accuracy: 3.44%
Checking KNN, relaxed to top 5 membership
==> KNN relax training accuracy: 80.45%
==> KNN relax test accuracy: 18.32%
>> python main.py --seed_xval 2 --seed_pairs 2 --LMNN -c 50 -p scale -f combo --knn -k 7 --knn_relax_n 5 --lmnnMu 0.00001
Training set:  50 cliques found in 624 tracks.
Test set:  50 cliques found in 262 tracks.
-- using combo features --
Data preprocessor: <class 'transform.StandardScaler'>
Loading training set...  completed in 13 seconds.
Preprocessing data...  completed in 0.0296 seconds.
Creating temp file 'temp/LMNN-data.temp.mat'  : 1.2 MB
Invoking MATLAB with command:
>> matlab -nodisplay -nojvm -r "cd 'lib/mLMNN2.4/'; run('setpaths.m'); cd '../../'; load('temp/LMNN-data.temp.mat'); [L,Det] = lmnn2(X',y', 'diagonal', params.diagonal, 'mu', params.mu, 'obj', 0); save('temp/LMNN-res.temp.mat', 'L', 'Det', '-v6'); quit;"
 logging results to temp/LMNN.log
LMNN optimization completed in 0.9 minutes.
 results logged to temp/LMNN.log
Mahalanobis matrix: 
  243 dimensions
  59049 nonzero elements
KNN: using 'mahalanobis' metric with params ['VI']
Running KNN with k=7 and mahalanobis metric
==> KNN training accuracy: 22.12%
==> KNN test accuracy: 5.34%
Checking KNN, relaxed to top 5 membership
==> KNN relax training accuracy: 79.33%
==> KNN relax test accuracy: 19.08%
>> python main.py --seed_xval 3 --seed_pairs 3 --LMNN -c 50 -p scale -f combo --knn -k 7 --knn_relax_n 5 --lmnnMu 0.00001
Training set:  50 cliques found in 624 tracks.
Test set:  50 cliques found in 262 tracks.
-- using combo features --
Data preprocessor: <class 'transform.StandardScaler'>
Loading training set...  completed in 13 seconds.
Preprocessing data...  completed in 0.0265 seconds.
Creating temp file 'temp/LMNN-data.temp.mat'  : 1.2 MB
Invoking MATLAB with command:
>> matlab -nodisplay -nojvm -r "cd 'lib/mLMNN2.4/'; run('setpaths.m'); cd '../../'; load('temp/LMNN-data.temp.mat'); [L,Det] = lmnn2(X',y', 'diagonal', params.diagonal, 'mu', params.mu, 'obj', 0); save('temp/LMNN-res.temp.mat', 'L', 'Det', '-v6'); quit;"
 logging results to temp/LMNN.log
LMNN optimization completed in 1 minutes.
 results logged to temp/LMNN.log
Mahalanobis matrix: 
  243 dimensions
  59049 nonzero elements
KNN: using 'mahalanobis' metric with params ['VI']
Running KNN with k=7 and mahalanobis metric
==> KNN training accuracy: 20.51%
==> KNN test accuracy: 4.58%
Checking KNN, relaxed to top 5 membership
==> KNN relax training accuracy: 77.88%
==> KNN relax test accuracy: 18.70%
>> python main.py --seed_xval 4 --seed_pairs 4 --LMNN -c 50 -p scale -f combo --knn -k 7 --knn_relax_n 5 --lmnnMu 0.00001
Training set:  50 cliques found in 624 tracks.
Test set:  50 cliques found in 262 tracks.
-- using combo features --
Data preprocessor: <class 'transform.StandardScaler'>
Loading training set...  completed in 12 seconds.
Preprocessing data...  completed in 0.027 seconds.
Creating temp file 'temp/LMNN-data.temp.mat'  : 1.2 MB
Invoking MATLAB with command:
>> matlab -nodisplay -nojvm -r "cd 'lib/mLMNN2.4/'; run('setpaths.m'); cd '../../'; load('temp/LMNN-data.temp.mat'); [L,Det] = lmnn2(X',y', 'diagonal', params.diagonal, 'mu', params.mu, 'obj', 0); save('temp/LMNN-res.temp.mat', 'L', 'Det', '-v6'); quit;"
 logging results to temp/LMNN.log
LMNN optimization completed in 1.2 minutes.
 results logged to temp/LMNN.log
Mahalanobis matrix: 
  243 dimensions
  59049 nonzero elements
KNN: using 'mahalanobis' metric with params ['VI']
Running KNN with k=7 and mahalanobis metric
==> KNN training accuracy: 22.44%
==> KNN test accuracy: 4.96%
Checking KNN, relaxed to top 5 membership
==> KNN relax training accuracy: 79.65%
==> KNN relax test accuracy: 14.50%
>> python main.py --seed_xval 5 --seed_pairs 5 --LMNN -c 50 -p scale -f combo --knn -k 7 --knn_relax_n 5 --lmnnMu 0.00001
Training set:  50 cliques found in 624 tracks.
Test set:  50 cliques found in 262 tracks.
-- using combo features --
Data preprocessor: <class 'transform.StandardScaler'>
Loading training set...  completed in 12 seconds.
Preprocessing data...  completed in 0.0263 seconds.
Creating temp file 'temp/LMNN-data.temp.mat'  : 1.2 MB
Invoking MATLAB with command:
>> matlab -nodisplay -nojvm -r "cd 'lib/mLMNN2.4/'; run('setpaths.m'); cd '../../'; load('temp/LMNN-data.temp.mat'); [L,Det] = lmnn2(X',y', 'diagonal', params.diagonal, 'mu', params.mu, 'obj', 0); save('temp/LMNN-res.temp.mat', 'L', 'Det', '-v6'); quit;"
 logging results to temp/LMNN.log
LMNN optimization completed in 0.85 minutes.
 results logged to temp/LMNN.log
Mahalanobis matrix: 
  243 dimensions
  59049 nonzero elements
KNN: using 'mahalanobis' metric with params ['VI']
Running KNN with k=7 and mahalanobis metric
==> KNN training accuracy: 25.96%
==> KNN test accuracy: 6.87%
Checking KNN, relaxed to top 5 membership
==> KNN relax training accuracy: 77.40%
==> KNN relax test accuracy: 19.47%
