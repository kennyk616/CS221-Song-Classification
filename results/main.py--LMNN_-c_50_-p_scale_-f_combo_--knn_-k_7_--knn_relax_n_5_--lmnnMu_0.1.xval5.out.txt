>> python main.py --seed_xval 1 --seed_pairs 1 --LMNN -c 50 -p scale -f combo --knn -k 7 --knn_relax_n 5 --lmnnMu 0.1
Training set:  50 cliques found in 624 tracks.
Test set:  50 cliques found in 262 tracks.
-- using combo features --
Data preprocessor: <class 'transform.StandardScaler'>
Loading training set...  completed in 13 seconds.
Preprocessing data...  completed in 0.0275 seconds.
Creating temp file 'temp/LMNN-data.temp.mat'  : 1.2 MB
Invoking MATLAB with command:
>> matlab -nodisplay -nojvm -r "cd 'lib/mLMNN2.4/'; run('setpaths.m'); cd '../../'; load('temp/LMNN-data.temp.mat'); [L,Det] = lmnn2(X',y', 'diagonal', params.diagonal, 'mu', params.mu, 'obj', 0); save('temp/LMNN-res.temp.mat', 'L', 'Det', '-v6'); quit;"
 logging results to temp/LMNN.log
LMNN optimization completed in 1.7 minutes.
 results logged to temp/LMNN.log
Mahalanobis matrix: 
  243 dimensions
  29403 nonzero elements
KNN: using 'mahalanobis' metric with params ['VI']
Running KNN with k=7 and mahalanobis metric
==> KNN training accuracy: 17.95%
==> KNN test accuracy: 0.76%
Checking KNN, relaxed to top 5 membership
==> KNN relax training accuracy: 82.53%
==> KNN relax test accuracy: 12.21%
>> python main.py --seed_xval 2 --seed_pairs 2 --LMNN -c 50 -p scale -f combo --knn -k 7 --knn_relax_n 5 --lmnnMu 0.1
Training set:  50 cliques found in 624 tracks.
Test set:  50 cliques found in 262 tracks.
-- using combo features --
Data preprocessor: <class 'transform.StandardScaler'>
Loading training set...  completed in 13 seconds.
Preprocessing data...  completed in 0.0277 seconds.
Creating temp file 'temp/LMNN-data.temp.mat'  : 1.2 MB
Invoking MATLAB with command:
>> matlab -nodisplay -nojvm -r "cd 'lib/mLMNN2.4/'; run('setpaths.m'); cd '../../'; load('temp/LMNN-data.temp.mat'); [L,Det] = lmnn2(X',y', 'diagonal', params.diagonal, 'mu', params.mu, 'obj', 0); save('temp/LMNN-res.temp.mat', 'L', 'Det', '-v6'); quit;"
 logging results to temp/LMNN.log
LMNN optimization completed in 1.5 minutes.
 results logged to temp/LMNN.log
Mahalanobis matrix: 
  243 dimensions
  27216 nonzero elements
KNN: using 'mahalanobis' metric with params ['VI']
Running KNN with k=7 and mahalanobis metric
==> KNN training accuracy: 12.50%
==> KNN test accuracy: 2.67%
Checking KNN, relaxed to top 5 membership
==> KNN relax training accuracy: 84.13%
==> KNN relax test accuracy: 14.89%
>> python main.py --seed_xval 3 --seed_pairs 3 --LMNN -c 50 -p scale -f combo --knn -k 7 --knn_relax_n 5 --lmnnMu 0.1
Training set:  50 cliques found in 624 tracks.
Test set:  50 cliques found in 262 tracks.
-- using combo features --
Data preprocessor: <class 'transform.StandardScaler'>
Loading training set...  completed in 12 seconds.
Preprocessing data...  completed in 0.0262 seconds.
Creating temp file 'temp/LMNN-data.temp.mat'  : 1.2 MB
Invoking MATLAB with command:
>> matlab -nodisplay -nojvm -r "cd 'lib/mLMNN2.4/'; run('setpaths.m'); cd '../../'; load('temp/LMNN-data.temp.mat'); [L,Det] = lmnn2(X',y', 'diagonal', params.diagonal, 'mu', params.mu, 'obj', 0); save('temp/LMNN-res.temp.mat', 'L', 'Det', '-v6'); quit;"
 logging results to temp/LMNN.log
LMNN optimization completed in 1.4 minutes.
 results logged to temp/LMNN.log
Mahalanobis matrix: 
  243 dimensions
  28188 nonzero elements
KNN: using 'mahalanobis' metric with params ['VI']
Running KNN with k=7 and mahalanobis metric
==> KNN training accuracy: 15.22%
==> KNN test accuracy: 3.05%
Checking KNN, relaxed to top 5 membership
==> KNN relax training accuracy: 82.69%
==> KNN relax test accuracy: 13.74%
>> python main.py --seed_xval 4 --seed_pairs 4 --LMNN -c 50 -p scale -f combo --knn -k 7 --knn_relax_n 5 --lmnnMu 0.1
Training set:  50 cliques found in 624 tracks.
Test set:  50 cliques found in 262 tracks.
-- using combo features --
Data preprocessor: <class 'transform.StandardScaler'>
Loading training set...  completed in 13 seconds.
Preprocessing data...  completed in 0.0254 seconds.
Creating temp file 'temp/LMNN-data.temp.mat'  : 1.2 MB
Invoking MATLAB with command:
>> matlab -nodisplay -nojvm -r "cd 'lib/mLMNN2.4/'; run('setpaths.m'); cd '../../'; load('temp/LMNN-data.temp.mat'); [L,Det] = lmnn2(X',y', 'diagonal', params.diagonal, 'mu', params.mu, 'obj', 0); save('temp/LMNN-res.temp.mat', 'L', 'Det', '-v6'); quit;"
 logging results to temp/LMNN.log
LMNN optimization completed in 1.4 minutes.
 results logged to temp/LMNN.log
Mahalanobis matrix: 
  243 dimensions
  27945 nonzero elements
KNN: using 'mahalanobis' metric with params ['VI']
Running KNN with k=7 and mahalanobis metric
==> KNN training accuracy: 12.18%
==> KNN test accuracy: 1.53%
Checking KNN, relaxed to top 5 membership
==> KNN relax training accuracy: 81.57%
==> KNN relax test accuracy: 14.12%
>> python main.py --seed_xval 5 --seed_pairs 5 --LMNN -c 50 -p scale -f combo --knn -k 7 --knn_relax_n 5 --lmnnMu 0.1
Training set:  50 cliques found in 624 tracks.
Test set:  50 cliques found in 262 tracks.
-- using combo features --
Data preprocessor: <class 'transform.StandardScaler'>
Loading training set...  completed in 13 seconds.
Preprocessing data...  completed in 0.026 seconds.
Creating temp file 'temp/LMNN-data.temp.mat'  : 1.2 MB
Invoking MATLAB with command:
>> matlab -nodisplay -nojvm -r "cd 'lib/mLMNN2.4/'; run('setpaths.m'); cd '../../'; load('temp/LMNN-data.temp.mat'); [L,Det] = lmnn2(X',y', 'diagonal', params.diagonal, 'mu', params.mu, 'obj', 0); save('temp/LMNN-res.temp.mat', 'L', 'Det', '-v6'); quit;"
 logging results to temp/LMNN.log
LMNN optimization completed in 1.4 minutes.
 results logged to temp/LMNN.log
Mahalanobis matrix: 
  243 dimensions
  25515 nonzero elements
KNN: using 'mahalanobis' metric with params ['VI']
Running KNN with k=7 and mahalanobis metric
==> KNN training accuracy: 20.03%
==> KNN test accuracy: 1.91%
Checking KNN, relaxed to top 5 membership
==> KNN relax training accuracy: 75.00%
==> KNN relax test accuracy: 13.36%
