>> python main.py --seed_xval 1 --seed_pairs 1 --LMNN -c 50 -p scale -f comboPlus --knn -k 7 --knn_relax_n 5 --lmnnMu 0.1
Training set:  50 cliques found in 624 tracks.
Test set:  50 cliques found in 262 tracks.
-- using comboPlus features --
Data preprocessor: <class 'transform.StandardScaler'>
Loading training set...  completed in 16 seconds.
Preprocessing data...  completed in 0.0298 seconds.
Creating temp file 'temp/LMNN-data.temp.mat'  : 1.4 MB
Invoking MATLAB with command:
>> matlab -nodisplay -nojvm -r "cd 'lib/mLMNN2.4/'; run('setpaths.m'); cd '../../'; load('temp/LMNN-data.temp.mat'); [L,Det] = lmnn2(X',y', 'diagonal', params.diagonal, 'mu', params.mu, 'obj', 0); save('temp/LMNN-res.temp.mat', 'L', 'Det', '-v6'); quit;"
 logging results to temp/LMNN.log
LMNN optimization completed in 1.8 minutes.
 results logged to temp/LMNN.log
Mahalanobis matrix: 
  287 dimensions
  44198 nonzero elements
KNN: using 'mahalanobis' metric with params ['VI']
Running KNN with k=7 and mahalanobis metric
==> KNN training accuracy: 15.54%
==> KNN test accuracy: 1.53%
Checking KNN, relaxed to top 5 membership
==> KNN relax training accuracy: 87.02%
==> KNN relax test accuracy: 9.16%
>> python main.py --seed_xval 2 --seed_pairs 2 --LMNN -c 50 -p scale -f comboPlus --knn -k 7 --knn_relax_n 5 --lmnnMu 0.1
Training set:  50 cliques found in 624 tracks.
Test set:  50 cliques found in 262 tracks.
-- using comboPlus features --
Data preprocessor: <class 'transform.StandardScaler'>
Loading training set...  completed in 16 seconds.
Preprocessing data...  completed in 0.0321 seconds.
Creating temp file 'temp/LMNN-data.temp.mat'  : 1.4 MB
Invoking MATLAB with command:
>> matlab -nodisplay -nojvm -r "cd 'lib/mLMNN2.4/'; run('setpaths.m'); cd '../../'; load('temp/LMNN-data.temp.mat'); [L,Det] = lmnn2(X',y', 'diagonal', params.diagonal, 'mu', params.mu, 'obj', 0); save('temp/LMNN-res.temp.mat', 'L', 'Det', '-v6'); quit;"
 logging results to temp/LMNN.log
LMNN optimization completed in 1.7 minutes.
 results logged to temp/LMNN.log
Mahalanobis matrix: 
  287 dimensions
  44198 nonzero elements
KNN: using 'mahalanobis' metric with params ['VI']
Running KNN with k=7 and mahalanobis metric
==> KNN training accuracy: 12.02%
==> KNN test accuracy: 3.05%
Checking KNN, relaxed to top 5 membership
==> KNN relax training accuracy: 85.10%
==> KNN relax test accuracy: 13.74%
>> python main.py --seed_xval 3 --seed_pairs 3 --LMNN -c 50 -p scale -f comboPlus --knn -k 7 --knn_relax_n 5 --lmnnMu 0.1
Training set:  50 cliques found in 624 tracks.
Test set:  50 cliques found in 262 tracks.
-- using comboPlus features --
Data preprocessor: <class 'transform.StandardScaler'>
Loading training set...  completed in 15 seconds.
Preprocessing data...  completed in 0.0308 seconds.
Creating temp file 'temp/LMNN-data.temp.mat'  : 1.4 MB
Invoking MATLAB with command:
>> matlab -nodisplay -nojvm -r "cd 'lib/mLMNN2.4/'; run('setpaths.m'); cd '../../'; load('temp/LMNN-data.temp.mat'); [L,Det] = lmnn2(X',y', 'diagonal', params.diagonal, 'mu', params.mu, 'obj', 0); save('temp/LMNN-res.temp.mat', 'L', 'Det', '-v6'); quit;"
 logging results to temp/LMNN.log
LMNN optimization completed in 1.8 minutes.
 results logged to temp/LMNN.log
Mahalanobis matrix: 
  287 dimensions
  45920 nonzero elements
KNN: using 'mahalanobis' metric with params ['VI']
Running KNN with k=7 and mahalanobis metric
==> KNN training accuracy: 11.86%
==> KNN test accuracy: 3.44%
Checking KNN, relaxed to top 5 membership
==> KNN relax training accuracy: 84.46%
==> KNN relax test accuracy: 12.21%
>> python main.py --seed_xval 4 --seed_pairs 4 --LMNN -c 50 -p scale -f comboPlus --knn -k 7 --knn_relax_n 5 --lmnnMu 0.1
Training set:  50 cliques found in 624 tracks.
Test set:  50 cliques found in 262 tracks.
-- using comboPlus features --
Data preprocessor: <class 'transform.StandardScaler'>
Loading training set...  completed in 15 seconds.
Preprocessing data...  completed in 0.0307 seconds.
Creating temp file 'temp/LMNN-data.temp.mat'  : 1.4 MB
Invoking MATLAB with command:
>> matlab -nodisplay -nojvm -r "cd 'lib/mLMNN2.4/'; run('setpaths.m'); cd '../../'; load('temp/LMNN-data.temp.mat'); [L,Det] = lmnn2(X',y', 'diagonal', params.diagonal, 'mu', params.mu, 'obj', 0); save('temp/LMNN-res.temp.mat', 'L', 'Det', '-v6'); quit;"
 logging results to temp/LMNN.log
LMNN optimization completed in 1.9 minutes.
 results logged to temp/LMNN.log
Mahalanobis matrix: 
  287 dimensions
  45920 nonzero elements
KNN: using 'mahalanobis' metric with params ['VI']
Running KNN with k=7 and mahalanobis metric
==> KNN training accuracy: 12.02%
==> KNN test accuracy: 1.91%
Checking KNN, relaxed to top 5 membership
==> KNN relax training accuracy: 87.66%
==> KNN relax test accuracy: 12.98%
>> python main.py --seed_xval 5 --seed_pairs 5 --LMNN -c 50 -p scale -f comboPlus --knn -k 7 --knn_relax_n 5 --lmnnMu 0.1
Training set:  50 cliques found in 624 tracks.
Test set:  50 cliques found in 262 tracks.
-- using comboPlus features --
Data preprocessor: <class 'transform.StandardScaler'>
Loading training set...  completed in 16 seconds.
Preprocessing data...  completed in 0.0313 seconds.
Creating temp file 'temp/LMNN-data.temp.mat'  : 1.4 MB
Invoking MATLAB with command:
>> matlab -nodisplay -nojvm -r "cd 'lib/mLMNN2.4/'; run('setpaths.m'); cd '../../'; load('temp/LMNN-data.temp.mat'); [L,Det] = lmnn2(X',y', 'diagonal', params.diagonal, 'mu', params.mu, 'obj', 0); save('temp/LMNN-res.temp.mat', 'L', 'Det', '-v6'); quit;"
 logging results to temp/LMNN.log
LMNN optimization completed in 2.1 minutes.
 results logged to temp/LMNN.log
Mahalanobis matrix: 
  287 dimensions
  43911 nonzero elements
KNN: using 'mahalanobis' metric with params ['VI']
Running KNN with k=7 and mahalanobis metric
==> KNN training accuracy: 15.22%
==> KNN test accuracy: 3.05%
Checking KNN, relaxed to top 5 membership
==> KNN relax training accuracy: 81.25%
==> KNN relax test accuracy: 12.98%
