>> python main.py --seed_xval 1 --seed_pairs 1 --LMNN -c 50 -p scale -f combo --knn -k 7 --knn_relax_n 5 --lmnnMu 0.5
Training set:  50 cliques found in 624 tracks.
Test set:  50 cliques found in 262 tracks.
-- using combo features --
Data preprocessor: <class 'transform.StandardScaler'>
Loading training set...  completed in 13 seconds.
Preprocessing data...  completed in 0.0255 seconds.
Creating temp file 'temp/LMNN-data.temp.mat'  : 1.2 MB
Invoking MATLAB with command:
>> matlab -nodisplay -nojvm -r "cd 'lib/mLMNN2.4/'; run('setpaths.m'); cd '../../'; load('temp/LMNN-data.temp.mat'); [L,Det] = lmnn2(X',y', 'diagonal', params.diagonal, 'mu', params.mu, 'obj', 0); save('temp/LMNN-res.temp.mat', 'L', 'Det', '-v6'); quit;"
 logging results to temp/LMNN.log
LMNN optimization completed in 1.8 minutes.
 results logged to temp/LMNN.log
Mahalanobis matrix: 
  243 dimensions
  16524 nonzero elements
KNN: using 'mahalanobis' metric with params ['VI']
Running KNN with k=7 and mahalanobis metric
==> KNN training accuracy: 21.47%
==> KNN test accuracy: 3.05%
Checking KNN, relaxed to top 5 membership
==> KNN relax training accuracy: 79.49%
==> KNN relax test accuracy: 11.83%
>> python main.py --seed_xval 2 --seed_pairs 2 --LMNN -c 50 -p scale -f combo --knn -k 7 --knn_relax_n 5 --lmnnMu 0.5
Training set:  50 cliques found in 624 tracks.
Test set:  50 cliques found in 262 tracks.
-- using combo features --
Data preprocessor: <class 'transform.StandardScaler'>
Loading training set...  completed in 13 seconds.
Preprocessing data...  completed in 0.0319 seconds.
Creating temp file 'temp/LMNN-data.temp.mat'  : 1.2 MB
Invoking MATLAB with command:
>> matlab -nodisplay -nojvm -r "cd 'lib/mLMNN2.4/'; run('setpaths.m'); cd '../../'; load('temp/LMNN-data.temp.mat'); [L,Det] = lmnn2(X',y', 'diagonal', params.diagonal, 'mu', params.mu, 'obj', 0); save('temp/LMNN-res.temp.mat', 'L', 'Det', '-v6'); quit;"
 logging results to temp/LMNN.log
LMNN optimization completed in 2.1 minutes.
 results logged to temp/LMNN.log
Mahalanobis matrix: 
  243 dimensions
  16038 nonzero elements
KNN: using 'mahalanobis' metric with params ['VI']
Running KNN with k=7 and mahalanobis metric
==> KNN training accuracy: 18.11%
==> KNN test accuracy: 2.67%
Checking KNN, relaxed to top 5 membership
==> KNN relax training accuracy: 81.41%
==> KNN relax test accuracy: 15.65%
>> python main.py --seed_xval 3 --seed_pairs 3 --LMNN -c 50 -p scale -f combo --knn -k 7 --knn_relax_n 5 --lmnnMu 0.5
Training set:  50 cliques found in 624 tracks.
Test set:  50 cliques found in 262 tracks.
-- using combo features --
Data preprocessor: <class 'transform.StandardScaler'>
Loading training set...  completed in 13 seconds.
Preprocessing data...  completed in 0.0306 seconds.
Creating temp file 'temp/LMNN-data.temp.mat'  : 1.2 MB
Invoking MATLAB with command:
>> matlab -nodisplay -nojvm -r "cd 'lib/mLMNN2.4/'; run('setpaths.m'); cd '../../'; load('temp/LMNN-data.temp.mat'); [L,Det] = lmnn2(X',y', 'diagonal', params.diagonal, 'mu', params.mu, 'obj', 0); save('temp/LMNN-res.temp.mat', 'L', 'Det', '-v6'); quit;"
 logging results to temp/LMNN.log
LMNN optimization completed in 2.2 minutes.
 results logged to temp/LMNN.log
Mahalanobis matrix: 
  243 dimensions
  16281 nonzero elements
KNN: using 'mahalanobis' metric with params ['VI']
Running KNN with k=7 and mahalanobis metric
==> KNN training accuracy: 12.66%
==> KNN test accuracy: 1.53%
Checking KNN, relaxed to top 5 membership
==> KNN relax training accuracy: 81.25%
==> KNN relax test accuracy: 11.83%
>> python main.py --seed_xval 4 --seed_pairs 4 --LMNN -c 50 -p scale -f combo --knn -k 7 --knn_relax_n 5 --lmnnMu 0.5
Training set:  50 cliques found in 624 tracks.
Test set:  50 cliques found in 262 tracks.
-- using combo features --
Data preprocessor: <class 'transform.StandardScaler'>
Loading training set...  completed in 13 seconds.
Preprocessing data...  completed in 0.0378 seconds.
Creating temp file 'temp/LMNN-data.temp.mat'  : 1.2 MB
Invoking MATLAB with command:
>> matlab -nodisplay -nojvm -r "cd 'lib/mLMNN2.4/'; run('setpaths.m'); cd '../../'; load('temp/LMNN-data.temp.mat'); [L,Det] = lmnn2(X',y', 'diagonal', params.diagonal, 'mu', params.mu, 'obj', 0); save('temp/LMNN-res.temp.mat', 'L', 'Det', '-v6'); quit;"
 logging results to temp/LMNN.log
LMNN optimization completed in 1.6 minutes.
 results logged to temp/LMNN.log
Mahalanobis matrix: 
  243 dimensions
  15309 nonzero elements
KNN: using 'mahalanobis' metric with params ['VI']
Running KNN with k=7 and mahalanobis metric
==> KNN training accuracy: 16.19%
==> KNN test accuracy: 0.76%
Checking KNN, relaxed to top 5 membership
==> KNN relax training accuracy: 79.97%
==> KNN relax test accuracy: 15.27%
>> python main.py --seed_xval 5 --seed_pairs 5 --LMNN -c 50 -p scale -f combo --knn -k 7 --knn_relax_n 5 --lmnnMu 0.5
Training set:  50 cliques found in 624 tracks.
Test set:  50 cliques found in 262 tracks.
-- using combo features --
Data preprocessor: <class 'transform.StandardScaler'>
Loading training set...  completed in 12 seconds.
Preprocessing data...  completed in 0.0309 seconds.
Creating temp file 'temp/LMNN-data.temp.mat'  : 1.2 MB
Invoking MATLAB with command:
>> matlab -nodisplay -nojvm -r "cd 'lib/mLMNN2.4/'; run('setpaths.m'); cd '../../'; load('temp/LMNN-data.temp.mat'); [L,Det] = lmnn2(X',y', 'diagonal', params.diagonal, 'mu', params.mu, 'obj', 0); save('temp/LMNN-res.temp.mat', 'L', 'Det', '-v6'); quit;"
 logging results to temp/LMNN.log
LMNN optimization completed in 1 minutes.
 results logged to temp/LMNN.log
Mahalanobis matrix: 
  243 dimensions
  17253 nonzero elements
KNN: using 'mahalanobis' metric with params ['VI']
Running KNN with k=7 and mahalanobis metric
==> KNN training accuracy: 20.51%
==> KNN test accuracy: 1.53%
Checking KNN, relaxed to top 5 membership
==> KNN relax training accuracy: 75.00%
==> KNN relax test accuracy: 8.78%
