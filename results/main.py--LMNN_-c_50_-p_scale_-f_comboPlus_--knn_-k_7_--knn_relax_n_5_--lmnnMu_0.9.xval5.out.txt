>> python main.py --seed_xval 1 --seed_pairs 1 --LMNN -c 50 -p scale -f comboPlus --knn -k 7 --knn_relax_n 5 --lmnnMu 0.9
Training set:  50 cliques found in 624 tracks.
Test set:  50 cliques found in 262 tracks.
-- using comboPlus features --
Data preprocessor: <class 'transform.StandardScaler'>
Loading training set...  completed in 15 seconds.
Preprocessing data...  completed in 0.0306 seconds.
Creating temp file 'temp/LMNN-data.temp.mat'  : 1.4 MB
Invoking MATLAB with command:
>> matlab -nodisplay -nojvm -r "cd 'lib/mLMNN2.4/'; run('setpaths.m'); cd '../../'; load('temp/LMNN-data.temp.mat'); [L,Det] = lmnn2(X',y', 'diagonal', params.diagonal, 'mu', params.mu, 'obj', 0); save('temp/LMNN-res.temp.mat', 'L', 'Det', '-v6'); quit;"
 logging results to temp/LMNN.log
LMNN optimization completed in 1.2 minutes.
 results logged to temp/LMNN.log
Mahalanobis matrix: 
  287 dimensions
  19516 nonzero elements
KNN: using 'mahalanobis' metric with params ['VI']
Running KNN with k=7 and mahalanobis metric
==> KNN training accuracy: 22.12%
==> KNN test accuracy: 2.29%
Checking KNN, relaxed to top 5 membership
==> KNN relax training accuracy: 81.89%
==> KNN relax test accuracy: 14.12%
>> python main.py --seed_xval 2 --seed_pairs 2 --LMNN -c 50 -p scale -f comboPlus --knn -k 7 --knn_relax_n 5 --lmnnMu 0.9
Training set:  50 cliques found in 624 tracks.
Test set:  50 cliques found in 262 tracks.
-- using comboPlus features --
Data preprocessor: <class 'transform.StandardScaler'>
Loading training set...  completed in 16 seconds.
Preprocessing data...  completed in 0.0297 seconds.
Creating temp file 'temp/LMNN-data.temp.mat'  : 1.4 MB
Invoking MATLAB with command:
>> matlab -nodisplay -nojvm -r "cd 'lib/mLMNN2.4/'; run('setpaths.m'); cd '../../'; load('temp/LMNN-data.temp.mat'); [L,Det] = lmnn2(X',y', 'diagonal', params.diagonal, 'mu', params.mu, 'obj', 0); save('temp/LMNN-res.temp.mat', 'L', 'Det', '-v6'); quit;"
 logging results to temp/LMNN.log
LMNN optimization completed in 1.5 minutes.
 results logged to temp/LMNN.log
Mahalanobis matrix: 
  287 dimensions
  16072 nonzero elements
KNN: using 'mahalanobis' metric with params ['VI']
Running KNN with k=7 and mahalanobis metric
==> KNN training accuracy: 17.47%
==> KNN test accuracy: 2.67%
Checking KNN, relaxed to top 5 membership
==> KNN relax training accuracy: 84.46%
==> KNN relax test accuracy: 14.12%
>> python main.py --seed_xval 3 --seed_pairs 3 --LMNN -c 50 -p scale -f comboPlus --knn -k 7 --knn_relax_n 5 --lmnnMu 0.9
Training set:  50 cliques found in 624 tracks.
Test set:  50 cliques found in 262 tracks.
-- using comboPlus features --
Data preprocessor: <class 'transform.StandardScaler'>
Loading training set...  completed in 15 seconds.
Preprocessing data...  completed in 0.0307 seconds.
Creating temp file 'temp/LMNN-data.temp.mat'  : 1.4 MB
Invoking MATLAB with command:
>> matlab -nodisplay -nojvm -r "cd 'lib/mLMNN2.4/'; run('setpaths.m'); cd '../../'; load('temp/LMNN-data.temp.mat'); [L,Det] = lmnn2(X',y', 'diagonal', params.diagonal, 'mu', params.mu, 'obj', 0); save('temp/LMNN-res.temp.mat', 'L', 'Det', '-v6'); quit;"
 logging results to temp/LMNN.log
LMNN optimization completed in 1.1 minutes.
 results logged to temp/LMNN.log
Mahalanobis matrix: 
  287 dimensions
  19516 nonzero elements
KNN: using 'mahalanobis' metric with params ['VI']
Running KNN with k=7 and mahalanobis metric
==> KNN training accuracy: 16.19%
==> KNN test accuracy: 1.53%
Checking KNN, relaxed to top 5 membership
==> KNN relax training accuracy: 79.65%
==> KNN relax test accuracy: 11.07%
>> python main.py --seed_xval 4 --seed_pairs 4 --LMNN -c 50 -p scale -f comboPlus --knn -k 7 --knn_relax_n 5 --lmnnMu 0.9
Training set:  50 cliques found in 624 tracks.
Test set:  50 cliques found in 262 tracks.
-- using comboPlus features --
Data preprocessor: <class 'transform.StandardScaler'>
Loading training set...  completed in 16 seconds.
Preprocessing data...  completed in 0.0304 seconds.
Creating temp file 'temp/LMNN-data.temp.mat'  : 1.4 MB
Invoking MATLAB with command:
>> matlab -nodisplay -nojvm -r "cd 'lib/mLMNN2.4/'; run('setpaths.m'); cd '../../'; load('temp/LMNN-data.temp.mat'); [L,Det] = lmnn2(X',y', 'diagonal', params.diagonal, 'mu', params.mu, 'obj', 0); save('temp/LMNN-res.temp.mat', 'L', 'Det', '-v6'); quit;"
 logging results to temp/LMNN.log
LMNN optimization completed in 1.1 minutes.
 results logged to temp/LMNN.log
Mahalanobis matrix: 
  287 dimensions
  18942 nonzero elements
KNN: using 'mahalanobis' metric with params ['VI']
Running KNN with k=7 and mahalanobis metric
==> KNN training accuracy: 15.54%
==> KNN test accuracy: 2.29%
Checking KNN, relaxed to top 5 membership
==> KNN relax training accuracy: 79.65%
==> KNN relax test accuracy: 17.56%
>> python main.py --seed_xval 5 --seed_pairs 5 --LMNN -c 50 -p scale -f comboPlus --knn -k 7 --knn_relax_n 5 --lmnnMu 0.9
Training set:  50 cliques found in 624 tracks.
Test set:  50 cliques found in 262 tracks.
-- using comboPlus features --
Data preprocessor: <class 'transform.StandardScaler'>
Loading training set...  completed in 16 seconds.
Preprocessing data...  completed in 0.0328 seconds.
Creating temp file 'temp/LMNN-data.temp.mat'  : 1.4 MB
Invoking MATLAB with command:
>> matlab -nodisplay -nojvm -r "cd 'lib/mLMNN2.4/'; run('setpaths.m'); cd '../../'; load('temp/LMNN-data.temp.mat'); [L,Det] = lmnn2(X',y', 'diagonal', params.diagonal, 'mu', params.mu, 'obj', 0); save('temp/LMNN-res.temp.mat', 'L', 'Det', '-v6'); quit;"
 logging results to temp/LMNN.log
LMNN optimization completed in 1.1 minutes.
 results logged to temp/LMNN.log
Mahalanobis matrix: 
  287 dimensions
  18942 nonzero elements
KNN: using 'mahalanobis' metric with params ['VI']
Running KNN with k=7 and mahalanobis metric
==> KNN training accuracy: 20.03%
==> KNN test accuracy: 1.91%
Checking KNN, relaxed to top 5 membership
==> KNN relax training accuracy: 79.81%
==> KNN relax test accuracy: 14.12%
